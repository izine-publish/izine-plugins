/* soapStub.h
   Generated by gSOAP 2.7.13 from server.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (39)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues {wsa__Reply = 0};
#endif
typedef enum wsa__RelationshipTypeValues wsa__RelationshipTypeValues;

#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (40)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues {wsa__InvalidMessageInformationHeader = 0, wsa__MessageInformationHeaderRequired = 1, wsa__DestinationUnreachable = 2, wsa__ActionNotSupported = 3, wsa__EndpointUnavailable = 4};
#endif
typedef enum wsa__FaultSubcodeValues wsa__FaultSubcodeValues;

#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (61)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {wsu__MessageExpired = 0};
#endif
typedef enum wsu__tTimestampFault wsu__tTimestampFault;

#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (63)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {wsse__UnsupportedSecurityToken = 0, wsse__UnsupportedAlgorithm = 1, wsse__InvalidSecurity = 2, wsse__InvalidSecurityToken = 3, wsse__FailedAuthentication = 4, wsse__FailedCheck = 5, wsse__SecurityTokenUnavailable = 6};
#endif
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_wsrp__path_USCOREt
#define SOAP_TYPE_wsrp__path_USCOREt (7)
/* wsrp:path_t */
struct wsrp__path_USCOREt
{
public:
	char *wsrp__action;	/* required element of type xsd:string */
	char *wsrp__to;	/* optional element of type xsd:string */
	struct wsrp__fwd_USCOREt *wsrp__fwd;	/* optional element of type wsrp:fwd_t */
	struct wsrp__rev_USCOREt *wsrp__rev;	/* optional element of type wsrp:rev_t */
	char *wsrp__from;	/* optional element of type xsd:string */
	char *wsrp__id;	/* optional element of type xsd:string */
	char *wsrp__relatesTo;	/* optional element of type xsd:string */
	struct wsrp__fault_USCOREt *wsrp__fault;	/* optional element of type wsrp:fault_t */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsrp__path_USCOREt wsrp__path_USCOREt;

#ifndef SOAP_TYPE_wsrp__fwd_USCOREt
#define SOAP_TYPE_wsrp__fwd_USCOREt (9)
/* wsrp:fwd_t */
struct wsrp__fwd_USCOREt
{
public:
	int __sizevia;	/* sequence of elements <wsrp:via> */
	struct wsrp__via_USCOREt **wsrp__via;	/* optional element of type wsrp:via_t */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsrp__fwd_USCOREt wsrp__fwd_USCOREt;

#ifndef SOAP_TYPE_wsrp__rev_USCOREt
#define SOAP_TYPE_wsrp__rev_USCOREt (10)
/* wsrp:rev_t */
struct wsrp__rev_USCOREt
{
public:
	int __sizevia;	/* sequence of elements <wsrp:via> */
	struct wsrp__via_USCOREt **wsrp__via;	/* optional element of type wsrp:via_t */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsrp__rev_USCOREt wsrp__rev_USCOREt;

#ifndef SOAP_TYPE_wsrp__found_USCOREt
#define SOAP_TYPE_wsrp__found_USCOREt (11)
/* wsrp:found_t */
struct wsrp__found_USCOREt
{
public:
	int __sizeat;	/* sequence of elements <at> */
	char **at;	/* required element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsrp__found_USCOREt wsrp__found_USCOREt;

#ifndef SOAP_TYPE_wsrp__fault_USCOREt
#define SOAP_TYPE_wsrp__fault_USCOREt (12)
/* wsrp:fault_t */
struct wsrp__fault_USCOREt
{
public:
	char *wsrp__faultcode;	/* required element of type xsd:string */
	char *wsrp__faultreason;	/* required element of type xsd:string */
	char *endpoint;	/* optional element of type xsd:string */
	struct wsrp__found_USCOREt *found;	/* optional element of type wsrp:found_t */
	int *maxsize;	/* optional element of type xsd:int */
	int *maxtime;	/* optional element of type xsd:int */
	int *retryAfter;	/* optional element of type xsd:int */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsrp__fault_USCOREt wsrp__fault_USCOREt;

#ifndef SOAP_TYPE_wsrp__via_USCOREt
#define SOAP_TYPE_wsrp__via_USCOREt (8)
/* Primitive wsrp:via_t schema type: */
struct wsrp__via_USCOREt
{
public:
	char *__item;
	char *vid;	/* optional attribute of type xsd:string */
};
#endif
typedef struct wsrp__via_USCOREt wsrp__via_USCOREt;

#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (34)
/* wsa:EndpointReferenceType */
struct wsa__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa__ReferencePropertiesType *ReferenceProperties;	/* optional element of type wsa:ReferencePropertiesType */
	struct wsa__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa:ReferenceParametersType */
	char **PortType;	/* optional element of type xsd:QName */
	struct wsa__ServiceNameType *ServiceName;	/* optional element of type wsa:ServiceNameType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsa__EndpointReferenceType wsa__EndpointReferenceType;

#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (35)
/* wsa:ReferencePropertiesType */
struct wsa__ReferencePropertiesType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
};
#endif
typedef struct wsa__ReferencePropertiesType wsa__ReferencePropertiesType;

#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (36)
/* wsa:ReferenceParametersType */
struct wsa__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
};
#endif
typedef struct wsa__ReferenceParametersType wsa__ReferenceParametersType;

#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (37)
/* Primitive wsa:ServiceNameType schema type: */
struct wsa__ServiceNameType
{
public:
	char *__item;
	char *PortName;	/* optional attribute of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsa__ServiceNameType wsa__ServiceNameType;

#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (38)
/* Primitive wsa:Relationship schema type: */
struct wsa__Relationship
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type xsd:QName */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
#endif
typedef struct wsa__Relationship wsa__Relationship;

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (56)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	char *wsa__MessageID;	/* optional element of type wsa:MessageID */
	struct wsa__Relationship *wsa__RelatesTo;	/* optional element of type wsa:RelatesTo */
	struct wsa__EndpointReferenceType *wsa__From;	/* optional element of type wsa:From */
	struct wsa__EndpointReferenceType *wsa__ReplyTo;	/* mustUnderstand */
	struct wsa__EndpointReferenceType *wsa__FaultTo;	/* mustUnderstand */
	char *wsa__To;	/* mustUnderstand */
	char *wsa__Action;	/* mustUnderstand */
	struct _wsse__Security *wsse__Security;	/* mustUnderstand */
	struct wsrp__path_USCOREt *wsrp__path;	/* mustUnderstand */
};
#endif

#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (62)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
};
#endif
typedef struct _wsu__Timestamp _wsu__Timestamp;

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (64)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__UsernameToken _wsse__UsernameToken;

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (67)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (68)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Reference _wsse__Reference;

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (69)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Embedded _wsse__Embedded;

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (70)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (71)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (75)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureType ds__SignatureType;

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (84)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (85)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__TransformType ds__TransformType;

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (78)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__KeyInfoType ds__KeyInfoType;

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (76)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__SignedInfoType ds__SignedInfoType;

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (80)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
};
#endif
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (81)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__SignatureMethodType ds__SignatureMethodType;

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (82)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__ReferenceType ds__ReferenceType;

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (83)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
};
#endif
typedef struct ds__TransformsType ds__TransformsType;

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (87)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
};
#endif
typedef struct ds__DigestMethodType ds__DigestMethodType;

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (88)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* required element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* required element of type ds:RSAKeyValueType */
};
#endif
typedef struct ds__KeyValueType ds__KeyValueType;

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (90)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (92)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* required element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* required element of type xsd:string */
	char *X509SubjectName;	/* required element of type xsd:string */
	char *X509Certificate;	/* required element of type xsd:string */
	char *X509CRL;	/* required element of type xsd:string */
};
#endif
typedef struct ds__X509DataType ds__X509DataType;

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (95)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	int X509SerialNumber;	/* required element of type xsd:int */
};
#endif
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (96)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
};
#endif
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (97)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
};
#endif
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (108)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Security _wsse__Security;

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (65)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
};
#endif
typedef struct _wsse__Password _wsse__Password;

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (115)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif
typedef struct _xop__Include _xop__Include;

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (118)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfUserDTO
#define SOAP_TYPE_ns3__ArrayOfUserDTO (120)
/* ns3:ArrayOfUserDTO */
class SOAP_CMAC ns3__ArrayOfUserDTO
{
public:
	int __sizeUserDTO;	/* sequence of elements <UserDTO> */
	class ns3__UserDTO **UserDTO;	/* optional element of type ns3:UserDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_ns3__ArrayOfUserDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfUserDTO() : __sizeUserDTO(0), UserDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfUserDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__UserDTO
#define SOAP_TYPE_ns3__UserDTO (121)
/* ns3:UserDTO */
class SOAP_CMAC ns3__UserDTO
{
public:
	wchar_t *userid;	/* required element of type ns4:guid */
	wchar_t *username;	/* optional element of type xsd:string */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_ns3__UserDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__UserDTO() : userid(NULL), username(NULL), name(NULL), soap(NULL) { }
	virtual ~ns3__UserDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfIdNameDTO
#define SOAP_TYPE_ns3__ArrayOfIdNameDTO (122)
/* ns3:ArrayOfIdNameDTO */
class SOAP_CMAC ns3__ArrayOfIdNameDTO
{
public:
	int __sizeIdNameDTO;	/* sequence of elements <IdNameDTO> */
	class ns3__IdNameDTO **IdNameDTO;	/* optional element of type ns3:IdNameDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_ns3__ArrayOfIdNameDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfIdNameDTO() : __sizeIdNameDTO(0), IdNameDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfIdNameDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__IdNameDTO
#define SOAP_TYPE_ns3__IdNameDTO (123)
/* ns3:IdNameDTO */
class SOAP_CMAC ns3__IdNameDTO
{
public:
	int id;	/* required element of type xsd:int */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_ns3__IdNameDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__IdNameDTO() : id(0), name(NULL), soap(NULL) { }
	virtual ~ns3__IdNameDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__TaskDTO
#define SOAP_TYPE_ns3__TaskDTO (124)
/* ns3:TaskDTO */
class SOAP_CMAC ns3__TaskDTO
{
public:
	wchar_t *taskid;	/* required element of type ns4:guid */
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *subject;	/* optional element of type xsd:string */
	wchar_t *description;	/* optional element of type xsd:string */
	int taskStatusId;	/* required element of type xsd:int */
	wchar_t *assignToUserId;	/* required element of type ns4:guid */
	int *categoryId;	/* required element of type xsd:int */
	wchar_t *category;	/* optional element of type xsd:string */
	wchar_t *spread;	/* optional element of type xsd:string */
	wchar_t *page;	/* optional element of type xsd:string */
	wchar_t *editionId;	/* required element of type ns4:guid */
	int versionNumber;	/* required element of type xsd:int */
	class ns3__TaskUpdateInfo *TaskUpdateInfo;	/* optional element of type ns3:TaskUpdateInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_ns3__TaskDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskDTO() : taskid(NULL), assetid(NULL), subject(NULL), description(NULL), taskStatusId(0), assignToUserId(NULL), categoryId(NULL), category(NULL), spread(NULL), page(NULL), editionId(NULL), versionNumber(0), TaskUpdateInfo(NULL), soap(NULL) { }
	virtual ~ns3__TaskDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__TaskUpdateInfo
#define SOAP_TYPE_ns3__TaskUpdateInfo (125)
/* ns3:TaskUpdateInfo */
class SOAP_CMAC ns3__TaskUpdateInfo
{
public:
	time_t CreationDate;	/* required element of type xsd:dateTime */
	wchar_t *createdByUserid;	/* required element of type ns4:guid */
	wchar_t *lastModifiedUserId;	/* required element of type ns4:guid */
	time_t *lastModifiedDate;	/* required element of type xsd:dateTime */
	wchar_t *assigntoUserName;	/* optional element of type xsd:string */
	wchar_t *createdByUserName;	/* optional element of type xsd:string */
	wchar_t *lastModifiedUserName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_ns3__TaskUpdateInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskUpdateInfo() : CreationDate(0), createdByUserid(NULL), lastModifiedUserId(NULL), lastModifiedDate(NULL), assigntoUserName(NULL), createdByUserName(NULL), lastModifiedUserName(NULL), soap(NULL) { }
	virtual ~ns3__TaskUpdateInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfTitleDTO
#define SOAP_TYPE_ns3__ArrayOfTitleDTO (126)
/* ns3:ArrayOfTitleDTO */
class SOAP_CMAC ns3__ArrayOfTitleDTO
{
public:
	int __sizeTitleDTO;	/* sequence of elements <TitleDTO> */
	class ns3__TitleDTO **TitleDTO;	/* optional element of type ns3:TitleDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE_ns3__ArrayOfTitleDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfTitleDTO() : __sizeTitleDTO(0), TitleDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfTitleDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ConstantDTO
#define SOAP_TYPE_ns3__ConstantDTO (128)
/* ns3:ConstantDTO */
class SOAP_CMAC ns3__ConstantDTO
{
public:
	wchar_t *constantid;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_ns3__ConstantDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ConstantDTO() : constantid(NULL), name(NULL), soap(NULL) { }
	virtual ~ns3__ConstantDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfCommentDTO
#define SOAP_TYPE_ns3__ArrayOfCommentDTO (129)
/* ns3:ArrayOfCommentDTO */
class SOAP_CMAC ns3__ArrayOfCommentDTO
{
public:
	int __sizeCommentDTO;	/* sequence of elements <CommentDTO> */
	class ns3__CommentDTO **CommentDTO;	/* optional element of type ns3:CommentDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_ns3__ArrayOfCommentDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfCommentDTO() : __sizeCommentDTO(0), CommentDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfCommentDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__CommentDTO
#define SOAP_TYPE_ns3__CommentDTO (130)
/* ns3:CommentDTO */
class SOAP_CMAC ns3__CommentDTO
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	wchar_t *comment;	/* optional element of type xsd:string */
	wchar_t *statusid;	/* required element of type ns4:guid */
	wchar_t *status;	/* optional element of type xsd:string */
	wchar_t *userid;	/* required element of type ns4:guid */
	wchar_t *username;	/* optional element of type xsd:string */
	time_t *date;	/* required element of type xsd:dateTime */
	wchar_t *versionid;	/* required element of type ns4:guid */
	int *number;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_ns3__CommentDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__CommentDTO() : assetid(NULL), name(NULL), comment(NULL), statusid(NULL), status(NULL), userid(NULL), username(NULL), date(NULL), versionid(NULL), number(NULL), soap(NULL) { }
	virtual ~ns3__CommentDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfString
#define SOAP_TYPE_ns3__ArrayOfString (131)
/* ns3:ArrayOfString */
class SOAP_CMAC ns3__ArrayOfString
{
public:
	int __sizestring;	/* sequence of elements <string> */
	wchar_t **string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_ns3__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfString() : __sizestring(0), string(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfShelveDTO
#define SOAP_TYPE_ns3__ArrayOfShelveDTO (132)
/* ns3:ArrayOfShelveDTO */
class SOAP_CMAC ns3__ArrayOfShelveDTO
{
public:
	int __sizeShelveDTO;	/* sequence of elements <ShelveDTO> */
	class ns3__ShelveDTO **ShelveDTO;	/* optional element of type ns3:ShelveDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_ns3__ArrayOfShelveDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfShelveDTO() : __sizeShelveDTO(0), ShelveDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfShelveDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ShelveDTO
#define SOAP_TYPE_ns3__ShelveDTO (133)
/* ns3:ShelveDTO */
class SOAP_CMAC ns3__ShelveDTO
{
public:
	wchar_t *shelveid;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_ns3__ShelveDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ShelveDTO() : shelveid(NULL), name(NULL), soap(NULL) { }
	virtual ~ns3__ShelveDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__LockDTO
#define SOAP_TYPE_ns3__LockDTO (134)
/* ns3:LockDTO */
class SOAP_CMAC ns3__LockDTO
{
public:
	wchar_t *lockid;	/* required element of type ns4:guid */
	wchar_t *applicationname;	/* optional element of type xsd:string */
	wchar_t *documentname;	/* optional element of type xsd:string */
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *documentid;	/* required element of type ns4:guid */
	wchar_t *userid;	/* required element of type ns4:guid */
	wchar_t *username;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_ns3__LockDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__LockDTO() : lockid(NULL), applicationname(NULL), documentname(NULL), assetid(NULL), documentid(NULL), userid(NULL), username(NULL), soap(NULL) { }
	virtual ~ns3__LockDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__AssetDTO
#define SOAP_TYPE_ns3__AssetDTO (135)
/* ns3:AssetDTO */
class SOAP_CMAC ns3__AssetDTO
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	wchar_t *documentid;	/* required element of type ns4:guid */
	wchar_t *documentname;	/* optional element of type xsd:string */
	wchar_t *titleid;	/* required element of type ns4:guid */
	wchar_t *shelveid;	/* required element of type ns4:guid */
	wchar_t *lockid;	/* required element of type ns4:guid */
	wchar_t *typeid_;	/* required element of type ns4:guid */
	wchar_t *type;	/* optional element of type xsd:string */
	class ns3__VersionInfo *Head;	/* optional element of type ns3:VersionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_ns3__AssetDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__AssetDTO() : assetid(NULL), name(NULL), documentid(NULL), documentname(NULL), titleid(NULL), shelveid(NULL), lockid(NULL), typeid_(NULL), type(NULL), Head(NULL), soap(NULL) { }
	virtual ~ns3__AssetDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__VersionInfo
#define SOAP_TYPE_ns3__VersionInfo (136)
/* ns3:VersionInfo */
class SOAP_CMAC ns3__VersionInfo
{
public:
	wchar_t *statusid;	/* required element of type ns4:guid */
	time_t *date;	/* required element of type xsd:dateTime */
	wchar_t *versionid;	/* required element of type ns4:guid */
	int *number;	/* required element of type xsd:int */
	ns3__UserDTO *user;	/* optional element of type ns3:UserDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_ns3__VersionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__VersionInfo() : statusid(NULL), date(NULL), versionid(NULL), number(NULL), user(NULL), soap(NULL) { }
	virtual ~ns3__VersionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfGuid
#define SOAP_TYPE_ns3__ArrayOfGuid (137)
/* ns3:ArrayOfGuid */
class SOAP_CMAC ns3__ArrayOfGuid
{
public:
	int __sizeguid;	/* sequence of elements <guid> */
	wchar_t **guid;	/* optional element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE_ns3__ArrayOfGuid */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfGuid() : __sizeguid(0), guid(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfGuid() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfAssetDTO
#define SOAP_TYPE_ns3__ArrayOfAssetDTO (138)
/* ns3:ArrayOfAssetDTO */
class SOAP_CMAC ns3__ArrayOfAssetDTO
{
public:
	int __sizeAssetDTO;	/* sequence of elements <AssetDTO> */
	ns3__AssetDTO **AssetDTO;	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_ns3__ArrayOfAssetDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfAssetDTO() : __sizeAssetDTO(0), AssetDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfAssetDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__VersionDTO
#define SOAP_TYPE_ns3__VersionDTO (139)
/* ns3:VersionDTO */
class SOAP_CMAC ns3__VersionDTO
{
public:
	wchar_t *versionId;	/* required element of type ns4:guid */
	xsd__base64Binary *data;	/* optional element of type xsd:base64Binary */
	bool isCompressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_ns3__VersionDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__VersionDTO() : versionId(NULL), data(NULL), isCompressed((bool)0), soap(NULL) { }
	virtual ~ns3__VersionDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfTaskDTO
#define SOAP_TYPE_ns3__ArrayOfTaskDTO (140)
/* ns3:ArrayOfTaskDTO */
class SOAP_CMAC ns3__ArrayOfTaskDTO
{
public:
	int __sizeTaskDTO;	/* sequence of elements <TaskDTO> */
	ns3__TaskDTO **TaskDTO;	/* optional element of type ns3:TaskDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_ns3__ArrayOfTaskDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfTaskDTO() : __sizeTaskDTO(0), TaskDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfTaskDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfEditionTitlesDTO
#define SOAP_TYPE_ns3__ArrayOfEditionTitlesDTO (141)
/* ns3:ArrayOfEditionTitlesDTO */
class SOAP_CMAC ns3__ArrayOfEditionTitlesDTO
{
public:
	int __sizeEditionTitlesDTO;	/* sequence of elements <EditionTitlesDTO> */
	class ns3__EditionTitlesDTO **EditionTitlesDTO;	/* optional element of type ns3:EditionTitlesDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_ns3__ArrayOfEditionTitlesDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfEditionTitlesDTO() : __sizeEditionTitlesDTO(0), EditionTitlesDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfEditionTitlesDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__EditionTitlesDTO
#define SOAP_TYPE_ns3__EditionTitlesDTO (142)
/* ns3:EditionTitlesDTO */
class SOAP_CMAC ns3__EditionTitlesDTO
{
public:
	wchar_t *titleid;	/* required element of type ns4:guid */
	ns3__ArrayOfShelveDTO *editions;	/* optional element of type ns3:ArrayOfShelveDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_ns3__EditionTitlesDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__EditionTitlesDTO() : titleid(NULL), editions(NULL), soap(NULL) { }
	virtual ~ns3__EditionTitlesDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfTitleStatusDTO
#define SOAP_TYPE_ns3__ArrayOfTitleStatusDTO (143)
/* ns3:ArrayOfTitleStatusDTO */
class SOAP_CMAC ns3__ArrayOfTitleStatusDTO
{
public:
	int __sizeTitleStatusDTO;	/* sequence of elements <TitleStatusDTO> */
	class ns3__TitleStatusDTO **TitleStatusDTO;	/* optional element of type ns3:TitleStatusDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_ns3__ArrayOfTitleStatusDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfTitleStatusDTO() : __sizeTitleStatusDTO(0), TitleStatusDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfTitleStatusDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__TitleStatusDTO
#define SOAP_TYPE_ns3__TitleStatusDTO (144)
/* ns3:TitleStatusDTO */
class SOAP_CMAC ns3__TitleStatusDTO
{
public:
	wchar_t *titleid;	/* required element of type ns4:guid */
	class ns3__ArrayOfStatusDTO *statuses;	/* optional element of type ns3:ArrayOfStatusDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_ns3__TitleStatusDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TitleStatusDTO() : titleid(NULL), statuses(NULL), soap(NULL) { }
	virtual ~ns3__TitleStatusDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfStatusDTO
#define SOAP_TYPE_ns3__ArrayOfStatusDTO (145)
/* ns3:ArrayOfStatusDTO */
class SOAP_CMAC ns3__ArrayOfStatusDTO
{
public:
	int __sizeStatusDTO;	/* sequence of elements <StatusDTO> */
	class ns3__StatusDTO **StatusDTO;	/* optional element of type ns3:StatusDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_ns3__ArrayOfStatusDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfStatusDTO() : __sizeStatusDTO(0), StatusDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfStatusDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__StatusDTO
#define SOAP_TYPE_ns3__StatusDTO (146)
/* ns3:StatusDTO */
class SOAP_CMAC ns3__StatusDTO
{
public:
	wchar_t *statusId;	/* required element of type ns4:guid */
	wchar_t *statusName;	/* optional element of type xsd:string */
	bool layout;	/* required element of type xsd:boolean */
	bool text;	/* required element of type xsd:boolean */
	wchar_t *stateId;	/* required element of type ns4:guid */
	int sortIndex;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_ns3__StatusDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__StatusDTO() : statusId(NULL), statusName(NULL), layout((bool)0), text((bool)0), stateId(NULL), sortIndex(0), soap(NULL) { }
	virtual ~ns3__StatusDTO() { }
};
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfLockDTO
#define SOAP_TYPE_ns3__ArrayOfLockDTO (147)
/* ns3:ArrayOfLockDTO */
class SOAP_CMAC ns3__ArrayOfLockDTO
{
public:
	int __sizeLockDTO;	/* sequence of elements <LockDTO> */
	ns3__LockDTO **LockDTO;	/* optional element of type ns3:LockDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_ns3__ArrayOfLockDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ArrayOfLockDTO() : __sizeLockDTO(0), LockDTO(NULL), soap(NULL) { }
	virtual ~ns3__ArrayOfLockDTO() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetUsersForTitle
#define SOAP_TYPE__ns3__GetUsersForTitle (148)
/* ns3:GetUsersForTitle */
class SOAP_CMAC _ns3__GetUsersForTitle
{
public:
	wchar_t *titleId;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE__ns3__GetUsersForTitle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetUsersForTitle() : titleId(NULL), soap(NULL) { }
	virtual ~_ns3__GetUsersForTitle() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetUsersForTitleResponse
#define SOAP_TYPE__ns3__GetUsersForTitleResponse (149)
/* ns3:GetUsersForTitleResponse */
class SOAP_CMAC _ns3__GetUsersForTitleResponse
{
public:
	ns3__ArrayOfUserDTO *GetUsersForTitleResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfUserDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE__ns3__GetUsersForTitleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetUsersForTitleResponse() : GetUsersForTitleResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetUsersForTitleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskStatusList
#define SOAP_TYPE__ns3__GetTaskStatusList (150)
/* ns3:GetTaskStatusList */
class SOAP_CMAC _ns3__GetTaskStatusList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE__ns3__GetTaskStatusList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskStatusList() : soap(NULL) { }
	virtual ~_ns3__GetTaskStatusList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskStatusListResponse
#define SOAP_TYPE__ns3__GetTaskStatusListResponse (151)
/* ns3:GetTaskStatusListResponse */
class SOAP_CMAC _ns3__GetTaskStatusListResponse
{
public:
	ns3__ArrayOfIdNameDTO *GetTaskStatusListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfIdNameDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE__ns3__GetTaskStatusListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskStatusListResponse() : GetTaskStatusListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetTaskStatusListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateTask
#define SOAP_TYPE__ns3__CreateTask (152)
/* ns3:CreateTask */
class SOAP_CMAC _ns3__CreateTask
{
public:
	ns3__TaskDTO *task;	/* optional element of type ns3:TaskDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE__ns3__CreateTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateTask() : task(NULL), soap(NULL) { }
	virtual ~_ns3__CreateTask() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateTaskResponse
#define SOAP_TYPE__ns3__CreateTaskResponse (153)
/* ns3:CreateTaskResponse */
class SOAP_CMAC _ns3__CreateTaskResponse
{
public:
	ns3__TaskDTO *CreateTaskResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:TaskDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE__ns3__CreateTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateTaskResponse() : CreateTaskResult(NULL), soap(NULL) { }
	virtual ~_ns3__CreateTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskCategoryList
#define SOAP_TYPE__ns3__GetTaskCategoryList (154)
/* ns3:GetTaskCategoryList */
class SOAP_CMAC _ns3__GetTaskCategoryList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE__ns3__GetTaskCategoryList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskCategoryList() : soap(NULL) { }
	virtual ~_ns3__GetTaskCategoryList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskCategoryListResponse
#define SOAP_TYPE__ns3__GetTaskCategoryListResponse (155)
/* ns3:GetTaskCategoryListResponse */
class SOAP_CMAC _ns3__GetTaskCategoryListResponse
{
public:
	ns3__ArrayOfIdNameDTO *GetTaskCategoryListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfIdNameDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE__ns3__GetTaskCategoryListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskCategoryListResponse() : GetTaskCategoryListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetTaskCategoryListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateTask
#define SOAP_TYPE__ns3__UpdateTask (156)
/* ns3:UpdateTask */
class SOAP_CMAC _ns3__UpdateTask
{
public:
	ns3__TaskDTO *task;	/* optional element of type ns3:TaskDTO */
	wchar_t *comment;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE__ns3__UpdateTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateTask() : task(NULL), comment(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateTask() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateTaskResponse
#define SOAP_TYPE__ns3__UpdateTaskResponse (157)
/* ns3:UpdateTaskResponse */
class SOAP_CMAC _ns3__UpdateTaskResponse
{
public:
	ns3__TaskDTO *UpdateTaskResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:TaskDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE__ns3__UpdateTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateTaskResponse() : UpdateTaskResult(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskHistory
#define SOAP_TYPE__ns3__GetTaskHistory (158)
/* ns3:GetTaskHistory */
class SOAP_CMAC _ns3__GetTaskHistory
{
public:
	wchar_t *taskid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE__ns3__GetTaskHistory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskHistory() : taskid(NULL), soap(NULL) { }
	virtual ~_ns3__GetTaskHistory() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTaskHistoryResponse
#define SOAP_TYPE__ns3__GetTaskHistoryResponse (159)
/* ns3:GetTaskHistoryResponse */
class SOAP_CMAC _ns3__GetTaskHistoryResponse
{
public:
	xsd__base64Binary *GetTaskHistoryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE__ns3__GetTaskHistoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTaskHistoryResponse() : GetTaskHistoryResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetTaskHistoryResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteTask
#define SOAP_TYPE__ns3__DeleteTask (160)
/* ns3:DeleteTask */
class SOAP_CMAC _ns3__DeleteTask
{
public:
	wchar_t *taskId;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE__ns3__DeleteTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteTask() : taskId(NULL), soap(NULL) { }
	virtual ~_ns3__DeleteTask() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteTaskResponse
#define SOAP_TYPE__ns3__DeleteTaskResponse (161)
/* ns3:DeleteTaskResponse */
class SOAP_CMAC _ns3__DeleteTaskResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE__ns3__DeleteTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteTaskResponse() : soap(NULL) { }
	virtual ~_ns3__DeleteTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Login
#define SOAP_TYPE__ns3__Login (162)
/* ns3:Login */
class SOAP_CMAC _ns3__Login
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE__ns3__Login */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Login() : soap(NULL) { }
	virtual ~_ns3__Login() { }
};
#endif

#ifndef SOAP_TYPE__ns3__LoginResponse
#define SOAP_TYPE__ns3__LoginResponse (163)
/* ns3:LoginResponse */
class SOAP_CMAC _ns3__LoginResponse
{
public:
	ns3__UserDTO *LoginResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:UserDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE__ns3__LoginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__LoginResponse() : LoginResult(NULL), soap(NULL) { }
	virtual ~_ns3__LoginResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTitleList
#define SOAP_TYPE__ns3__GetTitleList (164)
/* ns3:GetTitleList */
class SOAP_CMAC _ns3__GetTitleList
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE__ns3__GetTitleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTitleList() : soap(NULL) { }
	virtual ~_ns3__GetTitleList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTitleListResponse
#define SOAP_TYPE__ns3__GetTitleListResponse (165)
/* ns3:GetTitleListResponse */
class SOAP_CMAC _ns3__GetTitleListResponse
{
public:
	ns3__ArrayOfTitleDTO *GetTitleListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfTitleDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE__ns3__GetTitleListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTitleListResponse() : GetTitleListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetTitleListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetRole
#define SOAP_TYPE__ns3__GetRole (166)
/* ns3:GetRole */
class SOAP_CMAC _ns3__GetRole
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE__ns3__GetRole */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRole() : soap(NULL) { }
	virtual ~_ns3__GetRole() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetRoleResponse
#define SOAP_TYPE__ns3__GetRoleResponse (167)
/* ns3:GetRoleResponse */
class SOAP_CMAC _ns3__GetRoleResponse
{
public:
	wchar_t *GetRoleResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE__ns3__GetRoleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRoleResponse() : GetRoleResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetRoleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetCommentList
#define SOAP_TYPE__ns3__GetCommentList (168)
/* ns3:GetCommentList */
class SOAP_CMAC _ns3__GetCommentList
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE__ns3__GetCommentList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetCommentList() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__GetCommentList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetCommentListResponse
#define SOAP_TYPE__ns3__GetCommentListResponse (169)
/* ns3:GetCommentListResponse */
class SOAP_CMAC _ns3__GetCommentListResponse
{
public:
	ns3__ArrayOfCommentDTO *GetCommentListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfCommentDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE__ns3__GetCommentListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetCommentListResponse() : GetCommentListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetCommentListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTags
#define SOAP_TYPE__ns3__GetTags (170)
/* ns3:GetTags */
class SOAP_CMAC _ns3__GetTags
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE__ns3__GetTags */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTags() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__GetTags() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTagsResponse
#define SOAP_TYPE__ns3__GetTagsResponse (171)
/* ns3:GetTagsResponse */
class SOAP_CMAC _ns3__GetTagsResponse
{
public:
	ns3__ArrayOfString *GetTagsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE__ns3__GetTagsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTagsResponse() : GetTagsResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetTagsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetShelveList
#define SOAP_TYPE__ns3__GetShelveList (172)
/* ns3:GetShelveList */
class SOAP_CMAC _ns3__GetShelveList
{
public:
	wchar_t *titleid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE__ns3__GetShelveList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetShelveList() : titleid(NULL), soap(NULL) { }
	virtual ~_ns3__GetShelveList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetShelveListResponse
#define SOAP_TYPE__ns3__GetShelveListResponse (173)
/* ns3:GetShelveListResponse */
class SOAP_CMAC _ns3__GetShelveListResponse
{
public:
	ns3__ArrayOfShelveDTO *GetShelveListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfShelveDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE__ns3__GetShelveListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetShelveListResponse() : GetShelveListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetShelveListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Logoff
#define SOAP_TYPE__ns3__Logoff (174)
/* ns3:Logoff */
class SOAP_CMAC _ns3__Logoff
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE__ns3__Logoff */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Logoff() : soap(NULL) { }
	virtual ~_ns3__Logoff() { }
};
#endif

#ifndef SOAP_TYPE__ns3__LogoffResponse
#define SOAP_TYPE__ns3__LogoffResponse (175)
/* ns3:LogoffResponse */
class SOAP_CMAC _ns3__LogoffResponse
{
public:
	bool LogoffResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE__ns3__LogoffResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__LogoffResponse() : LogoffResult((bool)0), soap(NULL) { }
	virtual ~_ns3__LogoffResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetUser
#define SOAP_TYPE__ns3__GetUser (176)
/* ns3:GetUser */
class SOAP_CMAC _ns3__GetUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE__ns3__GetUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetUser() : soap(NULL) { }
	virtual ~_ns3__GetUser() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetUserResponse
#define SOAP_TYPE__ns3__GetUserResponse (177)
/* ns3:GetUserResponse */
class SOAP_CMAC _ns3__GetUserResponse
{
public:
	ns3__UserDTO *GetUserResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:UserDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE__ns3__GetUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetUserResponse() : GetUserResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetThumbnail
#define SOAP_TYPE__ns3__GetThumbnail (178)
/* ns3:GetThumbnail */
class SOAP_CMAC _ns3__GetThumbnail
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE__ns3__GetThumbnail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetThumbnail() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__GetThumbnail() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetThumbnailResponse
#define SOAP_TYPE__ns3__GetThumbnailResponse (179)
/* ns3:GetThumbnailResponse */
class SOAP_CMAC _ns3__GetThumbnailResponse
{
public:
	xsd__base64Binary *GetThumbnailResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE__ns3__GetThumbnailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetThumbnailResponse() : GetThumbnailResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetThumbnailResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__LockAsset
#define SOAP_TYPE__ns3__LockAsset (180)
/* ns3:LockAsset */
class SOAP_CMAC _ns3__LockAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	ns3__LockDTO *lockDTO;	/* optional element of type ns3:LockDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE__ns3__LockAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__LockAsset() : assetid(NULL), lockDTO(NULL), soap(NULL) { }
	virtual ~_ns3__LockAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__LockAssetResponse
#define SOAP_TYPE__ns3__LockAssetResponse (181)
/* ns3:LockAssetResponse */
class SOAP_CMAC _ns3__LockAssetResponse
{
public:
	ns3__LockDTO *LockAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:LockDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE__ns3__LockAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__LockAssetResponse() : LockAssetResult(NULL), soap(NULL) { }
	virtual ~_ns3__LockAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UnlockAsset
#define SOAP_TYPE__ns3__UnlockAsset (182)
/* ns3:UnlockAsset */
class SOAP_CMAC _ns3__UnlockAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	bool forceUnlock;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE__ns3__UnlockAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UnlockAsset() : assetid(NULL), forceUnlock((bool)0), soap(NULL) { }
	virtual ~_ns3__UnlockAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UnlockAssetResponse
#define SOAP_TYPE__ns3__UnlockAssetResponse (183)
/* ns3:UnlockAssetResponse */
class SOAP_CMAC _ns3__UnlockAssetResponse
{
public:
	bool UnlockAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE__ns3__UnlockAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UnlockAssetResponse() : UnlockAssetResult((bool)0), soap(NULL) { }
	virtual ~_ns3__UnlockAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteAsset
#define SOAP_TYPE__ns3__DeleteAsset (184)
/* ns3:DeleteAsset */
class SOAP_CMAC _ns3__DeleteAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE__ns3__DeleteAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteAsset() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__DeleteAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DeleteAssetResponse
#define SOAP_TYPE__ns3__DeleteAssetResponse (185)
/* ns3:DeleteAssetResponse */
class SOAP_CMAC _ns3__DeleteAssetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE__ns3__DeleteAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DeleteAssetResponse() : soap(NULL) { }
	virtual ~_ns3__DeleteAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateAsset
#define SOAP_TYPE__ns3__CreateAsset (186)
/* ns3:CreateAsset */
class SOAP_CMAC _ns3__CreateAsset
{
public:
	ns3__AssetDTO *assetDTO;	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE__ns3__CreateAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateAsset() : assetDTO(NULL), soap(NULL) { }
	virtual ~_ns3__CreateAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CreateAssetResponse
#define SOAP_TYPE__ns3__CreateAssetResponse (187)
/* ns3:CreateAssetResponse */
class SOAP_CMAC _ns3__CreateAssetResponse
{
public:
	ns3__AssetDTO *CreateAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE__ns3__CreateAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CreateAssetResponse() : CreateAssetResult(NULL), soap(NULL) { }
	virtual ~_ns3__CreateAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAssetName
#define SOAP_TYPE__ns3__UpdateAssetName (188)
/* ns3:UpdateAssetName */
class SOAP_CMAC _ns3__UpdateAssetName
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE__ns3__UpdateAssetName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAssetName() : assetid(NULL), name(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAssetName() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAssetNameResponse
#define SOAP_TYPE__ns3__UpdateAssetNameResponse (189)
/* ns3:UpdateAssetNameResponse */
class SOAP_CMAC _ns3__UpdateAssetNameResponse
{
public:
	ns3__AssetDTO *UpdateAssetNameResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE__ns3__UpdateAssetNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAssetNameResponse() : UpdateAssetNameResult(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAssetNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CanUpdateAssetName
#define SOAP_TYPE__ns3__CanUpdateAssetName (190)
/* ns3:CanUpdateAssetName */
class SOAP_CMAC _ns3__CanUpdateAssetName
{
public:
	wchar_t *assetId;	/* required element of type ns4:guid */
	wchar_t *editionId;	/* required element of type ns4:guid */
	wchar_t *typeId;	/* required element of type ns4:guid */
	wchar_t *parentId;	/* required element of type ns4:guid */
	wchar_t *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE__ns3__CanUpdateAssetName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CanUpdateAssetName() : assetId(NULL), editionId(NULL), typeId(NULL), parentId(NULL), name(NULL), soap(NULL) { }
	virtual ~_ns3__CanUpdateAssetName() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CanUpdateAssetNameResponse
#define SOAP_TYPE__ns3__CanUpdateAssetNameResponse (191)
/* ns3:CanUpdateAssetNameResponse */
class SOAP_CMAC _ns3__CanUpdateAssetNameResponse
{
public:
	bool CanUpdateAssetNameResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE__ns3__CanUpdateAssetNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CanUpdateAssetNameResponse() : CanUpdateAssetNameResult((bool)0), soap(NULL) { }
	virtual ~_ns3__CanUpdateAssetNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAsset
#define SOAP_TYPE__ns3__GetAsset (192)
/* ns3:GetAsset */
class SOAP_CMAC _ns3__GetAsset
{
public:
	ns3__ArrayOfGuid *assetid;	/* optional element of type ns3:ArrayOfGuid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE__ns3__GetAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAsset() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__GetAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAssetResponse
#define SOAP_TYPE__ns3__GetAssetResponse (193)
/* ns3:GetAssetResponse */
class SOAP_CMAC _ns3__GetAssetResponse
{
public:
	ns3__ArrayOfAssetDTO *GetAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfAssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE__ns3__GetAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAssetResponse() : GetAssetResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadPDF
#define SOAP_TYPE__ns3__UploadPDF (194)
/* ns3:UploadPDF */
class SOAP_CMAC _ns3__UploadPDF
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *versionid;	/* required element of type ns4:guid */
	xsd__base64Binary *data;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE__ns3__UploadPDF */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadPDF() : assetid(NULL), versionid(NULL), data(NULL), soap(NULL) { }
	virtual ~_ns3__UploadPDF() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadPDFResponse
#define SOAP_TYPE__ns3__UploadPDFResponse (195)
/* ns3:UploadPDFResponse */
class SOAP_CMAC _ns3__UploadPDFResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE__ns3__UploadPDFResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadPDFResponse() : soap(NULL) { }
	virtual ~_ns3__UploadPDFResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadPage
#define SOAP_TYPE__ns3__UploadPage (196)
/* ns3:UploadPage */
class SOAP_CMAC _ns3__UploadPage
{
public:
	wchar_t *pageid;	/* required element of type ns4:guid */
	wchar_t *versionid;	/* required element of type ns4:guid */
	int number;	/* required element of type xsd:int */
	wchar_t *pagetypeid;	/* required element of type ns4:guid */
	xsd__base64Binary *data;	/* optional element of type xsd:base64Binary */
	bool isCompressed;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE__ns3__UploadPage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadPage() : pageid(NULL), versionid(NULL), number(0), pagetypeid(NULL), data(NULL), isCompressed((bool)0), soap(NULL) { }
	virtual ~_ns3__UploadPage() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadPageResponse
#define SOAP_TYPE__ns3__UploadPageResponse (197)
/* ns3:UploadPageResponse */
class SOAP_CMAC _ns3__UploadPageResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE__ns3__UploadPageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadPageResponse() : soap(NULL) { }
	virtual ~_ns3__UploadPageResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadVersion
#define SOAP_TYPE__ns3__UploadVersion (198)
/* ns3:UploadVersion */
class SOAP_CMAC _ns3__UploadVersion
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	ns3__VersionDTO *versionDto;	/* optional element of type ns3:VersionDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE__ns3__UploadVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadVersion() : assetid(NULL), versionDto(NULL), soap(NULL) { }
	virtual ~_ns3__UploadVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadVersionResponse
#define SOAP_TYPE__ns3__UploadVersionResponse (199)
/* ns3:UploadVersionResponse */
class SOAP_CMAC _ns3__UploadVersionResponse
{
public:
	wchar_t *UploadVersionResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE__ns3__UploadVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadVersionResponse() : UploadVersionResult(NULL), soap(NULL) { }
	virtual ~_ns3__UploadVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadExport
#define SOAP_TYPE__ns3__UploadExport (200)
/* ns3:UploadExport */
class SOAP_CMAC _ns3__UploadExport
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *versionid;	/* required element of type ns4:guid */
	bool isXML;	/* required element of type xsd:boolean */
	wchar_t *imageFileName;	/* optional element of type xsd:string */
	bool isHighRes;	/* required element of type xsd:boolean */
	bool isCompressed;	/* required element of type xsd:boolean */
	xsd__base64Binary *data;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE__ns3__UploadExport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadExport() : assetid(NULL), versionid(NULL), isXML((bool)0), imageFileName(NULL), isHighRes((bool)0), isCompressed((bool)0), data(NULL), soap(NULL) { }
	virtual ~_ns3__UploadExport() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UploadExportResponse
#define SOAP_TYPE__ns3__UploadExportResponse (201)
/* ns3:UploadExportResponse */
class SOAP_CMAC _ns3__UploadExportResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE__ns3__UploadExportResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UploadExportResponse() : soap(NULL) { }
	virtual ~_ns3__UploadExportResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UnlinkAsset
#define SOAP_TYPE__ns3__UnlinkAsset (202)
/* ns3:UnlinkAsset */
class SOAP_CMAC _ns3__UnlinkAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE__ns3__UnlinkAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UnlinkAsset() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__UnlinkAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UnlinkAssetResponse
#define SOAP_TYPE__ns3__UnlinkAssetResponse (203)
/* ns3:UnlinkAssetResponse */
class SOAP_CMAC _ns3__UnlinkAssetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE__ns3__UnlinkAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UnlinkAssetResponse() : soap(NULL) { }
	virtual ~_ns3__UnlinkAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__RelinkAsset
#define SOAP_TYPE__ns3__RelinkAsset (204)
/* ns3:RelinkAsset */
class SOAP_CMAC _ns3__RelinkAsset
{
public:
	wchar_t *documentid;	/* required element of type ns4:guid */
	wchar_t *assetid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE__ns3__RelinkAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RelinkAsset() : documentid(NULL), assetid(NULL), soap(NULL) { }
	virtual ~_ns3__RelinkAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__RelinkAssetResponse
#define SOAP_TYPE__ns3__RelinkAssetResponse (205)
/* ns3:RelinkAssetResponse */
class SOAP_CMAC _ns3__RelinkAssetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE__ns3__RelinkAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RelinkAssetResponse() : soap(NULL) { }
	virtual ~_ns3__RelinkAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetEditionTaskList
#define SOAP_TYPE__ns3__GetEditionTaskList (206)
/* ns3:GetEditionTaskList */
class SOAP_CMAC _ns3__GetEditionTaskList
{
public:
	wchar_t *editionId;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE__ns3__GetEditionTaskList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetEditionTaskList() : editionId(NULL), soap(NULL) { }
	virtual ~_ns3__GetEditionTaskList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetEditionTaskListResponse
#define SOAP_TYPE__ns3__GetEditionTaskListResponse (207)
/* ns3:GetEditionTaskListResponse */
class SOAP_CMAC _ns3__GetEditionTaskListResponse
{
public:
	ns3__ArrayOfTaskDTO *GetEditionTaskListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfTaskDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE__ns3__GetEditionTaskListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetEditionTaskListResponse() : GetEditionTaskListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetEditionTaskListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CheckOutAsset
#define SOAP_TYPE__ns3__CheckOutAsset (208)
/* ns3:CheckOutAsset */
class SOAP_CMAC _ns3__CheckOutAsset
{
public:
	wchar_t *assetid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE__ns3__CheckOutAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CheckOutAsset() : assetid(NULL), soap(NULL) { }
	virtual ~_ns3__CheckOutAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CheckOutAssetResponse
#define SOAP_TYPE__ns3__CheckOutAssetResponse (209)
/* ns3:CheckOutAssetResponse */
class SOAP_CMAC _ns3__CheckOutAssetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE__ns3__CheckOutAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CheckOutAssetResponse() : soap(NULL) { }
	virtual ~_ns3__CheckOutAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetEditionsByTitle
#define SOAP_TYPE__ns3__GetEditionsByTitle (210)
/* ns3:GetEditionsByTitle */
class SOAP_CMAC _ns3__GetEditionsByTitle
{
public:
	wchar_t *titleid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE__ns3__GetEditionsByTitle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetEditionsByTitle() : titleid(NULL), soap(NULL) { }
	virtual ~_ns3__GetEditionsByTitle() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetEditionsByTitleResponse
#define SOAP_TYPE__ns3__GetEditionsByTitleResponse (211)
/* ns3:GetEditionsByTitleResponse */
class SOAP_CMAC _ns3__GetEditionsByTitleResponse
{
public:
	ns3__ArrayOfEditionTitlesDTO *GetEditionsByTitleResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfEditionTitlesDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE__ns3__GetEditionsByTitleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetEditionsByTitleResponse() : GetEditionsByTitleResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetEditionsByTitleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetStatusByTitle
#define SOAP_TYPE__ns3__GetStatusByTitle (212)
/* ns3:GetStatusByTitle */
class SOAP_CMAC _ns3__GetStatusByTitle
{
public:
	wchar_t *titleid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE__ns3__GetStatusByTitle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetStatusByTitle() : titleid(NULL), soap(NULL) { }
	virtual ~_ns3__GetStatusByTitle() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetStatusByTitleResponse
#define SOAP_TYPE__ns3__GetStatusByTitleResponse (213)
/* ns3:GetStatusByTitleResponse */
class SOAP_CMAC _ns3__GetStatusByTitleResponse
{
public:
	ns3__ArrayOfTitleStatusDTO *GetStatusByTitleResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfTitleStatusDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE__ns3__GetStatusByTitleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetStatusByTitleResponse() : GetStatusByTitleResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetStatusByTitleResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAssetList
#define SOAP_TYPE__ns3__GetAssetList (214)
/* ns3:GetAssetList */
class SOAP_CMAC _ns3__GetAssetList
{
public:
	wchar_t *shelveid;	/* required element of type ns4:guid */
	ns3__ArrayOfGuid *types;	/* optional element of type ns3:ArrayOfGuid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE__ns3__GetAssetList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAssetList() : shelveid(NULL), types(NULL), soap(NULL) { }
	virtual ~_ns3__GetAssetList() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAssetListResponse
#define SOAP_TYPE__ns3__GetAssetListResponse (215)
/* ns3:GetAssetListResponse */
class SOAP_CMAC _ns3__GetAssetListResponse
{
public:
	ns3__ArrayOfAssetDTO *GetAssetListResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfAssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE__ns3__GetAssetListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAssetListResponse() : GetAssetListResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetAssetListResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAsset
#define SOAP_TYPE__ns3__UpdateAsset (216)
/* ns3:UpdateAsset */
class SOAP_CMAC _ns3__UpdateAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	ns3__AssetDTO *assetdto;	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE__ns3__UpdateAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAsset() : assetid(NULL), assetdto(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAssetResponse
#define SOAP_TYPE__ns3__UpdateAssetResponse (217)
/* ns3:UpdateAssetResponse */
class SOAP_CMAC _ns3__UpdateAssetResponse
{
public:
	ns3__AssetDTO *UpdateAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE__ns3__UpdateAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAssetResponse() : UpdateAssetResult(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAssetStatus
#define SOAP_TYPE__ns3__UpdateAssetStatus (218)
/* ns3:UpdateAssetStatus */
class SOAP_CMAC _ns3__UpdateAssetStatus
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *oldstatusid;	/* required element of type ns4:guid */
	wchar_t *newstatusid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE__ns3__UpdateAssetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAssetStatus() : assetid(NULL), oldstatusid(NULL), newstatusid(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAssetStatus() { }
};
#endif

#ifndef SOAP_TYPE__ns3__UpdateAssetStatusResponse
#define SOAP_TYPE__ns3__UpdateAssetStatusResponse (219)
/* ns3:UpdateAssetStatusResponse */
class SOAP_CMAC _ns3__UpdateAssetStatusResponse
{
public:
	ns3__AssetDTO *UpdateAssetStatusResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE__ns3__UpdateAssetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__UpdateAssetStatusResponse() : UpdateAssetStatusResult(NULL), soap(NULL) { }
	virtual ~_ns3__UpdateAssetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLock
#define SOAP_TYPE__ns3__GetLock (220)
/* ns3:GetLock */
class SOAP_CMAC _ns3__GetLock
{
public:
	ns3__ArrayOfGuid *assetids;	/* optional element of type ns3:ArrayOfGuid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE__ns3__GetLock */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLock() : assetids(NULL), soap(NULL) { }
	virtual ~_ns3__GetLock() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLockResponse
#define SOAP_TYPE__ns3__GetLockResponse (221)
/* ns3:GetLockResponse */
class SOAP_CMAC _ns3__GetLockResponse
{
public:
	ns3__ArrayOfLockDTO *GetLockResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:ArrayOfLockDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE__ns3__GetLockResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLockResponse() : GetLockResult(NULL), soap(NULL) { }
	virtual ~_ns3__GetLockResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CheckInAsset
#define SOAP_TYPE__ns3__CheckInAsset (222)
/* ns3:CheckInAsset */
class SOAP_CMAC _ns3__CheckInAsset
{
public:
	wchar_t *assetid;	/* required element of type ns4:guid */
	wchar_t *statusid;	/* required element of type ns4:guid */
	wchar_t *comment;	/* optional element of type xsd:string */
	wchar_t *versionId;	/* required element of type ns4:guid */
	int headVersion;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE__ns3__CheckInAsset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CheckInAsset() : assetid(NULL), statusid(NULL), comment(NULL), versionId(NULL), headVersion(0), soap(NULL) { }
	virtual ~_ns3__CheckInAsset() { }
};
#endif

#ifndef SOAP_TYPE__ns3__CheckInAssetResponse
#define SOAP_TYPE__ns3__CheckInAssetResponse (223)
/* ns3:CheckInAssetResponse */
class SOAP_CMAC _ns3__CheckInAssetResponse
{
public:
	ns3__AssetDTO *CheckInAssetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:AssetDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE__ns3__CheckInAssetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__CheckInAssetResponse() : CheckInAssetResult(NULL), soap(NULL) { }
	virtual ~_ns3__CheckInAssetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DownloadVersion
#define SOAP_TYPE__ns3__DownloadVersion (224)
/* ns3:DownloadVersion */
class SOAP_CMAC _ns3__DownloadVersion
{
public:
	wchar_t *versionid;	/* required element of type ns4:guid */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE__ns3__DownloadVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DownloadVersion() : versionid(NULL), soap(NULL) { }
	virtual ~_ns3__DownloadVersion() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DownloadVersionResponse
#define SOAP_TYPE__ns3__DownloadVersionResponse (225)
/* ns3:DownloadVersionResponse */
class SOAP_CMAC _ns3__DownloadVersionResponse
{
public:
	ns3__VersionDTO *DownloadVersionResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:VersionDTO */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE__ns3__DownloadVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DownloadVersionResponse() : DownloadVersionResult(NULL), soap(NULL) { }
	virtual ~_ns3__DownloadVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns3__TitleDTO
#define SOAP_TYPE_ns3__TitleDTO (127)
/* ns3:TitleDTO */
class SOAP_CMAC ns3__TitleDTO : public ns3__ConstantDTO
{
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_ns3__TitleDTO */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TitleDTO()  { }
	virtual ~ns3__TitleDTO() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetUsersForTitle
#define SOAP_TYPE___ns1__GetUsersForTitle (276)
/* Operation wrapper: */
struct __ns1__GetUsersForTitle
{
public:
	_ns3__GetUsersForTitle *ns3__GetUsersForTitle;	/* optional element of type ns3:GetUsersForTitle */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTaskStatusList
#define SOAP_TYPE___ns1__GetTaskStatusList (280)
/* Operation wrapper: */
struct __ns1__GetTaskStatusList
{
public:
	_ns3__GetTaskStatusList *ns3__GetTaskStatusList;	/* optional element of type ns3:GetTaskStatusList */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateTask
#define SOAP_TYPE___ns1__CreateTask (284)
/* Operation wrapper: */
struct __ns1__CreateTask
{
public:
	_ns3__CreateTask *ns3__CreateTask;	/* optional element of type ns3:CreateTask */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTaskCategoryList
#define SOAP_TYPE___ns1__GetTaskCategoryList (288)
/* Operation wrapper: */
struct __ns1__GetTaskCategoryList
{
public:
	_ns3__GetTaskCategoryList *ns3__GetTaskCategoryList;	/* optional element of type ns3:GetTaskCategoryList */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateTask
#define SOAP_TYPE___ns1__UpdateTask (292)
/* Operation wrapper: */
struct __ns1__UpdateTask
{
public:
	_ns3__UpdateTask *ns3__UpdateTask;	/* optional element of type ns3:UpdateTask */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTaskHistory
#define SOAP_TYPE___ns1__GetTaskHistory (296)
/* Operation wrapper: */
struct __ns1__GetTaskHistory
{
public:
	_ns3__GetTaskHistory *ns3__GetTaskHistory;	/* optional element of type ns3:GetTaskHistory */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTask
#define SOAP_TYPE___ns1__DeleteTask (300)
/* Operation wrapper: */
struct __ns1__DeleteTask
{
public:
	_ns3__DeleteTask *ns3__DeleteTask;	/* optional element of type ns3:DeleteTask */
};
#endif

#ifndef SOAP_TYPE___ns1__Login
#define SOAP_TYPE___ns1__Login (304)
/* Operation wrapper: */
struct __ns1__Login
{
public:
	_ns3__Login *ns3__Login;	/* optional element of type ns3:Login */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTitleList
#define SOAP_TYPE___ns1__GetTitleList (308)
/* Operation wrapper: */
struct __ns1__GetTitleList
{
public:
	_ns3__GetTitleList *ns3__GetTitleList;	/* optional element of type ns3:GetTitleList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRole
#define SOAP_TYPE___ns1__GetRole (312)
/* Operation wrapper: */
struct __ns1__GetRole
{
public:
	_ns3__GetRole *ns3__GetRole;	/* optional element of type ns3:GetRole */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCommentList
#define SOAP_TYPE___ns1__GetCommentList (316)
/* Operation wrapper: */
struct __ns1__GetCommentList
{
public:
	_ns3__GetCommentList *ns3__GetCommentList;	/* optional element of type ns3:GetCommentList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTags
#define SOAP_TYPE___ns1__GetTags (320)
/* Operation wrapper: */
struct __ns1__GetTags
{
public:
	_ns3__GetTags *ns3__GetTags;	/* optional element of type ns3:GetTags */
};
#endif

#ifndef SOAP_TYPE___ns1__GetShelveList
#define SOAP_TYPE___ns1__GetShelveList (324)
/* Operation wrapper: */
struct __ns1__GetShelveList
{
public:
	_ns3__GetShelveList *ns3__GetShelveList;	/* optional element of type ns3:GetShelveList */
};
#endif

#ifndef SOAP_TYPE___ns1__Logoff
#define SOAP_TYPE___ns1__Logoff (328)
/* Operation wrapper: */
struct __ns1__Logoff
{
public:
	_ns3__Logoff *ns3__Logoff;	/* optional element of type ns3:Logoff */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUser
#define SOAP_TYPE___ns1__GetUser (332)
/* Operation wrapper: */
struct __ns1__GetUser
{
public:
	_ns3__GetUser *ns3__GetUser;	/* optional element of type ns3:GetUser */
};
#endif

#ifndef SOAP_TYPE___ns1__GetThumbnail
#define SOAP_TYPE___ns1__GetThumbnail (336)
/* Operation wrapper: */
struct __ns1__GetThumbnail
{
public:
	_ns3__GetThumbnail *ns3__GetThumbnail;	/* optional element of type ns3:GetThumbnail */
};
#endif

#ifndef SOAP_TYPE___ns1__LockAsset
#define SOAP_TYPE___ns1__LockAsset (340)
/* Operation wrapper: */
struct __ns1__LockAsset
{
public:
	_ns3__LockAsset *ns3__LockAsset;	/* optional element of type ns3:LockAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__UnlockAsset
#define SOAP_TYPE___ns1__UnlockAsset (344)
/* Operation wrapper: */
struct __ns1__UnlockAsset
{
public:
	_ns3__UnlockAsset *ns3__UnlockAsset;	/* optional element of type ns3:UnlockAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteAsset
#define SOAP_TYPE___ns1__DeleteAsset (348)
/* Operation wrapper: */
struct __ns1__DeleteAsset
{
public:
	_ns3__DeleteAsset *ns3__DeleteAsset;	/* optional element of type ns3:DeleteAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateAsset
#define SOAP_TYPE___ns1__CreateAsset (352)
/* Operation wrapper: */
struct __ns1__CreateAsset
{
public:
	_ns3__CreateAsset *ns3__CreateAsset;	/* optional element of type ns3:CreateAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAssetName
#define SOAP_TYPE___ns1__UpdateAssetName (356)
/* Operation wrapper: */
struct __ns1__UpdateAssetName
{
public:
	_ns3__UpdateAssetName *ns3__UpdateAssetName;	/* optional element of type ns3:UpdateAssetName */
};
#endif

#ifndef SOAP_TYPE___ns1__CanUpdateAssetName
#define SOAP_TYPE___ns1__CanUpdateAssetName (360)
/* Operation wrapper: */
struct __ns1__CanUpdateAssetName
{
public:
	_ns3__CanUpdateAssetName *ns3__CanUpdateAssetName;	/* optional element of type ns3:CanUpdateAssetName */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAsset
#define SOAP_TYPE___ns1__GetAsset (364)
/* Operation wrapper: */
struct __ns1__GetAsset
{
public:
	_ns3__GetAsset *ns3__GetAsset;	/* optional element of type ns3:GetAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadPDF
#define SOAP_TYPE___ns1__UploadPDF (368)
/* Operation wrapper: */
struct __ns1__UploadPDF
{
public:
	_ns3__UploadPDF *ns3__UploadPDF;	/* optional element of type ns3:UploadPDF */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadPage
#define SOAP_TYPE___ns1__UploadPage (372)
/* Operation wrapper: */
struct __ns1__UploadPage
{
public:
	_ns3__UploadPage *ns3__UploadPage;	/* optional element of type ns3:UploadPage */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadVersion
#define SOAP_TYPE___ns1__UploadVersion (376)
/* Operation wrapper: */
struct __ns1__UploadVersion
{
public:
	_ns3__UploadVersion *ns3__UploadVersion;	/* optional element of type ns3:UploadVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadExport
#define SOAP_TYPE___ns1__UploadExport (380)
/* Operation wrapper: */
struct __ns1__UploadExport
{
public:
	_ns3__UploadExport *ns3__UploadExport;	/* optional element of type ns3:UploadExport */
};
#endif

#ifndef SOAP_TYPE___ns1__UnlinkAsset
#define SOAP_TYPE___ns1__UnlinkAsset (384)
/* Operation wrapper: */
struct __ns1__UnlinkAsset
{
public:
	_ns3__UnlinkAsset *ns3__UnlinkAsset;	/* optional element of type ns3:UnlinkAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__RelinkAsset
#define SOAP_TYPE___ns1__RelinkAsset (388)
/* Operation wrapper: */
struct __ns1__RelinkAsset
{
public:
	_ns3__RelinkAsset *ns3__RelinkAsset;	/* optional element of type ns3:RelinkAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__GetEditionTaskList
#define SOAP_TYPE___ns1__GetEditionTaskList (392)
/* Operation wrapper: */
struct __ns1__GetEditionTaskList
{
public:
	_ns3__GetEditionTaskList *ns3__GetEditionTaskList;	/* optional element of type ns3:GetEditionTaskList */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckOutAsset
#define SOAP_TYPE___ns1__CheckOutAsset (396)
/* Operation wrapper: */
struct __ns1__CheckOutAsset
{
public:
	_ns3__CheckOutAsset *ns3__CheckOutAsset;	/* optional element of type ns3:CheckOutAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__GetEditionsByTitle
#define SOAP_TYPE___ns1__GetEditionsByTitle (400)
/* Operation wrapper: */
struct __ns1__GetEditionsByTitle
{
public:
	_ns3__GetEditionsByTitle *ns3__GetEditionsByTitle;	/* optional element of type ns3:GetEditionsByTitle */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStatusByTitle
#define SOAP_TYPE___ns1__GetStatusByTitle (404)
/* Operation wrapper: */
struct __ns1__GetStatusByTitle
{
public:
	_ns3__GetStatusByTitle *ns3__GetStatusByTitle;	/* optional element of type ns3:GetStatusByTitle */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAssetList
#define SOAP_TYPE___ns1__GetAssetList (408)
/* Operation wrapper: */
struct __ns1__GetAssetList
{
public:
	_ns3__GetAssetList *ns3__GetAssetList;	/* optional element of type ns3:GetAssetList */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAsset
#define SOAP_TYPE___ns1__UpdateAsset (412)
/* Operation wrapper: */
struct __ns1__UpdateAsset
{
public:
	_ns3__UpdateAsset *ns3__UpdateAsset;	/* optional element of type ns3:UpdateAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__UpdateAssetStatus
#define SOAP_TYPE___ns1__UpdateAssetStatus (416)
/* Operation wrapper: */
struct __ns1__UpdateAssetStatus
{
public:
	_ns3__UpdateAssetStatus *ns3__UpdateAssetStatus;	/* optional element of type ns3:UpdateAssetStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLock
#define SOAP_TYPE___ns1__GetLock (420)
/* Operation wrapper: */
struct __ns1__GetLock
{
public:
	_ns3__GetLock *ns3__GetLock;	/* optional element of type ns3:GetLock */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckInAsset
#define SOAP_TYPE___ns1__CheckInAsset (424)
/* Operation wrapper: */
struct __ns1__CheckInAsset
{
public:
	_ns3__CheckInAsset *ns3__CheckInAsset;	/* optional element of type ns3:CheckInAsset */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadVersion
#define SOAP_TYPE___ns1__DownloadVersion (428)
/* Operation wrapper: */
struct __ns1__DownloadVersion
{
public:
	_ns3__DownloadVersion *ns3__DownloadVersion;	/* optional element of type ns3:DownloadVersion */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (429)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (431)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (434)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (435)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__wsrp__action
#define SOAP_TYPE__wsrp__action (13)
typedef char _wsrp__action;
#endif

#ifndef SOAP_TYPE__wsrp__to
#define SOAP_TYPE__wsrp__to (14)
typedef char _wsrp__to;
#endif

#ifndef SOAP_TYPE__wsrp__from
#define SOAP_TYPE__wsrp__from (15)
typedef char _wsrp__from;
#endif

#ifndef SOAP_TYPE__wsrp__id
#define SOAP_TYPE__wsrp__id (16)
typedef char _wsrp__id;
#endif

#ifndef SOAP_TYPE__wsrp__relatesTo
#define SOAP_TYPE__wsrp__relatesTo (17)
typedef char _wsrp__relatesTo;
#endif

#ifndef SOAP_TYPE__wsrp__faultcode
#define SOAP_TYPE__wsrp__faultcode (18)
typedef char _wsrp__faultcode;
#endif

#ifndef SOAP_TYPE__wsrp__faultreason
#define SOAP_TYPE__wsrp__faultreason (19)
typedef char _wsrp__faultreason;
#endif

#ifndef SOAP_TYPE__wsrp__path
#define SOAP_TYPE__wsrp__path (23)
typedef struct wsrp__path_USCOREt _wsrp__path;
#endif

#ifndef SOAP_TYPE__wsrp__fwd
#define SOAP_TYPE__wsrp__fwd (26)
typedef struct wsrp__fwd_USCOREt _wsrp__fwd;
#endif

#ifndef SOAP_TYPE__wsrp__rev
#define SOAP_TYPE__wsrp__rev (27)
typedef struct wsrp__rev_USCOREt _wsrp__rev;
#endif

#ifndef SOAP_TYPE__wsrp__found
#define SOAP_TYPE__wsrp__found (29)
typedef struct wsrp__found_USCOREt _wsrp__found;
#endif

#ifndef SOAP_TYPE__wsrp__fault
#define SOAP_TYPE__wsrp__fault (32)
typedef struct wsrp__fault_USCOREt _wsrp__fault;
#endif

#ifndef SOAP_TYPE__wsrp__via
#define SOAP_TYPE__wsrp__via (33)
typedef struct wsrp__via_USCOREt _wsrp__via;
#endif

#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (46)
typedef struct wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (47)
typedef char *_wsa__MessageID;
#endif

#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (48)
typedef struct wsa__Relationship _wsa__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (49)
typedef char *_wsa__To;
#endif

#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (50)
typedef char *_wsa__Action;
#endif

#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (51)
typedef struct wsa__EndpointReferenceType _wsa__From;
#endif

#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (52)
typedef struct wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (53)
typedef struct wsa__EndpointReferenceType _wsa__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (55)
typedef unsigned int _wsa__ReplyAfter;
#endif

#ifndef SOAP_TYPE_ns4__guid
#define SOAP_TYPE_ns4__guid (228)
typedef wchar_t *ns4__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUsersForTitle(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetUsersForTitle *ns3__GetUsersForTitle, _ns3__GetUsersForTitleResponse *ns3__GetUsersForTitleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTaskStatusList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTaskStatusList *ns3__GetTaskStatusList, _ns3__GetTaskStatusListResponse *ns3__GetTaskStatusListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__CreateTask *ns3__CreateTask, _ns3__CreateTaskResponse *ns3__CreateTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTaskCategoryList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTaskCategoryList *ns3__GetTaskCategoryList, _ns3__GetTaskCategoryListResponse *ns3__GetTaskCategoryListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UpdateTask *ns3__UpdateTask, _ns3__UpdateTaskResponse *ns3__UpdateTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTaskHistory(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTaskHistory *ns3__GetTaskHistory, _ns3__GetTaskHistoryResponse *ns3__GetTaskHistoryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DeleteTask *ns3__DeleteTask, _ns3__DeleteTaskResponse *ns3__DeleteTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Login(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Login *ns3__Login, _ns3__LoginResponse *ns3__LoginResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTitleList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTitleList *ns3__GetTitleList, _ns3__GetTitleListResponse *ns3__GetTitleListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRole(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRole *ns3__GetRole, _ns3__GetRoleResponse *ns3__GetRoleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetCommentList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetCommentList *ns3__GetCommentList, _ns3__GetCommentListResponse *ns3__GetCommentListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTags(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTags *ns3__GetTags, _ns3__GetTagsResponse *ns3__GetTagsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetShelveList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetShelveList *ns3__GetShelveList, _ns3__GetShelveListResponse *ns3__GetShelveListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Logoff(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Logoff *ns3__Logoff, _ns3__LogoffResponse *ns3__LogoffResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetUser *ns3__GetUser, _ns3__GetUserResponse *ns3__GetUserResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetThumbnail(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetThumbnail *ns3__GetThumbnail, _ns3__GetThumbnailResponse *ns3__GetThumbnailResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__LockAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__LockAsset *ns3__LockAsset, _ns3__LockAssetResponse *ns3__LockAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnlockAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UnlockAsset *ns3__UnlockAsset, _ns3__UnlockAssetResponse *ns3__UnlockAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DeleteAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DeleteAsset *ns3__DeleteAsset, _ns3__DeleteAssetResponse *ns3__DeleteAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CreateAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__CreateAsset *ns3__CreateAsset, _ns3__CreateAssetResponse *ns3__CreateAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAssetName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UpdateAssetName *ns3__UpdateAssetName, _ns3__UpdateAssetNameResponse *ns3__UpdateAssetNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CanUpdateAssetName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__CanUpdateAssetName *ns3__CanUpdateAssetName, _ns3__CanUpdateAssetNameResponse *ns3__CanUpdateAssetNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetAsset *ns3__GetAsset, _ns3__GetAssetResponse *ns3__GetAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UploadPDF(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UploadPDF *ns3__UploadPDF, _ns3__UploadPDFResponse *ns3__UploadPDFResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UploadPage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UploadPage *ns3__UploadPage, _ns3__UploadPageResponse *ns3__UploadPageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UploadVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UploadVersion *ns3__UploadVersion, _ns3__UploadVersionResponse *ns3__UploadVersionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UploadExport(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UploadExport *ns3__UploadExport, _ns3__UploadExportResponse *ns3__UploadExportResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UnlinkAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UnlinkAsset *ns3__UnlinkAsset, _ns3__UnlinkAssetResponse *ns3__UnlinkAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RelinkAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RelinkAsset *ns3__RelinkAsset, _ns3__RelinkAssetResponse *ns3__RelinkAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEditionTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetEditionTaskList *ns3__GetEditionTaskList, _ns3__GetEditionTaskListResponse *ns3__GetEditionTaskListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckOutAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__CheckOutAsset *ns3__CheckOutAsset, _ns3__CheckOutAssetResponse *ns3__CheckOutAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetEditionsByTitle(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetEditionsByTitle *ns3__GetEditionsByTitle, _ns3__GetEditionsByTitleResponse *ns3__GetEditionsByTitleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetStatusByTitle(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetStatusByTitle *ns3__GetStatusByTitle, _ns3__GetStatusByTitleResponse *ns3__GetStatusByTitleResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAssetList(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetAssetList *ns3__GetAssetList, _ns3__GetAssetListResponse *ns3__GetAssetListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UpdateAsset *ns3__UpdateAsset, _ns3__UpdateAssetResponse *ns3__UpdateAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__UpdateAssetStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__UpdateAssetStatus *ns3__UpdateAssetStatus, _ns3__UpdateAssetStatusResponse *ns3__UpdateAssetStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLock(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLock *ns3__GetLock, _ns3__GetLockResponse *ns3__GetLockResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CheckInAsset(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__CheckInAsset *ns3__CheckInAsset, _ns3__CheckInAssetResponse *ns3__CheckInAssetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DownloadVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DownloadVersion *ns3__DownloadVersion, _ns3__DownloadVersionResponse *ns3__DownloadVersionResponse);

#endif

/* End of soapStub.h */
